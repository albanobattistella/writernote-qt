name: Android

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - 'macos-build/**'
      - '!.github/workflows/android.yml'

  pull_request:
    branches: [ master ]

    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'macos-build/**'
      - '!.github/workflows/android.yml'

  release:
    types:
      - published

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QT: "6_4_0"
      QT_VER: 6.4.0
      PREFIX_LIB: "/home/runner/work/writernote-qt/writernote-qt/3rdparty"
      PROJECT_PATH: "/home/runner/work/writernote-qt/writernote-qt/"
      CACHE_KEY: cache-key-ci
      ZLIB_VER: "v1.2.11"
      RESET_CACHE: 'false'
      SDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/sdk"
      NDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/ndk"
      JDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/jdk"
      LIB_JPEG_TURBO: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/libjpeg-turbo"
      LIB_OPENJPEG: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/libopenjpeg"
      QT_PREFIX: "/home/runner/work/writernote-qt/Qt/6.4.0/android_arm64_v8a/"
      POPPLER_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/poppler"
      LIBPNG_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/libpng"
      LIBPNG_MAKEFILE: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/makefile.libpng.clang"
      NSS_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/nss"
      PATH_FREETYPE: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/freetype"
      ANDROID_VERSION: 28
      armeabi_v7a_pos: "/home/runner/work/writernote-qt/writernote-qt/writernote-armeabi-v7a.apk"
      arm64_v8a_pos: "/home/runner/work/writernote-qt/writernote-qt/writernote-arm64-v8a.apk"
      x86_64_pos: "/home/runner/work/writernote-qt/writernote-qt/writernote-x86_64.apk"
      x86_pos: "/home/runner/work/writernote-qt/writernote-qt/writernote-x86.apk"
      TOOLCHAIN: "clang"
    steps:
      - name: "Clone"
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up dep
        run: |
          sudo apt install snapd ninja-build
          sudo snap install cmake --classic
          sudo apt install -y python3 python3-pip tree
      
      - name: Download openJDK
        run: |
          curl -L https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz -o openjdk-linux.tar.gz
          tar -xf openjdk-linux.tar.gz
          mv java* $JDK_PATH

      - name: Download and set SDK 
        run: |
          curl -L https://dl.google.com/android/repository/platform-tools_r31.0.3-linux.zip -o sdk.zip
          unzip sdk.zip
          mv platform-tools $SDK_PATH

      - name: Download and set NDK
        run: |
          curl -L https://dl.google.com/android/repository/android-ndk-r22b-linux-x86_64.zip -o ndk.zip
          unzip ndk.zip
          mv android-ndk-r22b $NDK_PATH

      - name: Download qt
        run: |
          export QT_PATH=/home/runner/work/writernote-qt/Qt

          mkdir -p $QT_PATH

          pip3 install -U pip
          pip3 install aqtinstall

          mkdir -p $QT_PATH
          cd $QT_PATH

          aqt install-qt linux android $QT_VER android_arm64_v8a --autodesktop -m qtmultimedia qtandroidextras

          tree -d /home/runner/work/writernote-qt/

      - name: Build libzip
        run: |
          cd 3rdparty
          
          chmod +x libzip.sh
          ./libzip.sh OFF $NDK_PATH

      - name: Build openjpeg
        run: |
          cd $PREFIX_LIB
          curl -L https://github.com/uclouvain/openjpeg/archive/refs/tags/v2.4.0.tar.gz -o openjpeg.tar.gz
          tar -xf openjpeg.tar.gz 
          rm openjpeg.tar.gz

          mv openjpeg-2.4.0 libopenjpeg

          cd $LIB_OPENJPEG
          mkdir build
          mkdir install

          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$LIB_OPENJPEG/install \
            -DBUILD_SHARED_LIBS=OFF \
            -G"Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake

          make install -j$(nproc) 

      - name: install lib for build poppler
        run: |
          sudo apt-get install -y liblcms2-dev libtiff5-dev

      - name: Build libjpeg-turbo
        run: |
          cd $PREFIX_LIB
          git clone https://github.com/libjpeg-turbo/libjpeg-turbo -b 2.1.4
          
          cd  libjpeg-turbo
          mkdir install
          mkdir build

          cmake -G"Unix Makefiles" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_ARM_MODE=arm \
            -DANDROID_PLATFORM=android-$ANDROID_VERSION \
            -DANDROID_TOOLCHAIN=$TOOLCHAIN \
            -DCMAKE_ASM_FLAGS="--target=aarch64-linux-android$ANDROID_VERSION" \
            -DCMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=$LIB_JPEG_TURBO/install \
            -B$LIB_JPEG_TURBO/build \
            -DWITH_JPEG8=1
          
          cd build
          sudo make install -j$(nproc --all)

          tree $LIB_JPEG_TURBO

      - name: Build libpng
        run: |
          cd $PREFIX_LIB
          curl -L https://github.com/glennrp/libpng/archive/refs/tags/v1.6.35.tar.gz -o libpng.tar.gz
          tar -xf libpng.tar.gz
          rm libpng.tar.gz
          
          mv libpng-1.6.35 libpng
          mv $LIBPNG_MAKEFILE $LIBPNG_PATH/Makefile
          cd $LIBPNG_PATH
          make

      - name: Build poppler
        if: true
        run: |
          cd 3rdparty

          rm -rf poppler

          git clone https://github.com/freedesktop/poppler.git -b poppler-22.10.0
          cd poppler
          mkdir build
          mkdir install

          export CMAKE_PREFIX_PATH=$QT_PREFIX/lib/cmake/:$CMAKE_PREFIX_PATH
          export CMAKE_PREFIX_PATH=$QT_PREFIX/lib/:$CMAKE_PREFIX_PATH
          export CMAKE_PREFIX_PATH=$QT_PREFIX/:$CMAKE_PREFIX_PATH

          cd build

          # arm64-v8a
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=$POPPLER_PATH/install-arm64-v8a \
            -DFREETYPE_LIBRARY=/usr/lib/x86_64-linux-gnu/libfreetype.so \
            -DFREETYPE_INCLUDE_DIRS=/usr/include/freetype2 \
            -DANDROID_TOOLCHAIN=clang \
            -DCMAKE_BUILD_TYPE=Release \
            -DANDROID_PLATFORM=$ANDROID_VERSION \
            -D_FILE_OFFSET_BITS=64 \
            -DENABLE_BOOST=OFF \
            -DJPEG_LIBRARY=$LIB_JPEG_TURBO/install/lib/libjpeg.a \
            -DJPEG_INCLUDE_DIR=$LIB_JPEG_TURBO/install/include \
            -DBUILD_GTK_TESTS=OFF \
            -DBUILD_QT5_TESTS=OFF \
            -DBUILD_QT6_TESTS=OFF \
            -DBUILD_CPP_TESTS=OFF \
            -DBUILD_MANUAL_TESTS=OFF \
            -DENABLE_UTILS=OFF \
            -DENABLE_GTK_DOC=OFF \
            -DENABLE_QT6=ON \
            -DENABLE_QT5=OFF \
            -DENABLE_CMS=none \
            -DBUILD_SHARED_LIBS=OFF \
            -DPNG_LIBRARY=$LIBPNG_PATH/libpng.a \
            -DPNG_PNG_INCLUDE_DIR=$LIBPNG_PATH/ \
            -DOpenJPEG_DIR=$LIB_OPENJPEG/install/lib/openjpeg-2.4 \
            -DQt6Gui_DIR=$QT_PREFIX/lib/cmake/Qt6Gui \
            -DQt6Core_DIR=$QT_PREFIX/lib/cmake/Qt6Core \
            -DQt6Xml_DIR=$QT_PREFIX/lib/cmake/Qt6Xml \
            -DQt6Widgets_DIR=$QT_PREFIX/lib/cmake/Qt6Widgets \
            -DQt6Test_DIR=$QT_PREFIX/lib/cmake/Qt6Test \
            -DANDROID_ABI=arm64-v8a

          sudo make install -j$(nproc --all)
          make clean

      - name: Compile arm64-v8a
        run: |
          export ANDROID_NDK_ROOT=$NDK_PATH

          find $QT_PREFIX -name "qmake"

          $QT_PREFIX/bin/qmake ANDROID_ABIS=arm64-v8a
          make -j$(nproc) apk
          cp /home/runner/work/writernote-qt/writernote-qt/android-build/writernote.apk $arm64_v8a_pos
          
      - name: Upload file
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
        run: |
          export VERSION=$(git describe --tags --abbrev=0)
          export NAME_UP_ARM64=writernote-$VERSION-arm64-v8a.apk
          
          mv $arm64_v8a_pos $NAME_UP_ARM64

          gh release upload "$VERSION" $NAME_UP_ARM64 --clobber
          
