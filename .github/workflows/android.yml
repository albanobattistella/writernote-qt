name: Android

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - 'macos-build/**'
      - '!.github/workflows/android.yml'

  pull_request:
    branches: [ master ]

    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'macos-build/**'
      - '!.github/workflows/android.yml'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QT: "5_15_2"
      PREFIX_LIB: "/home/runner/work/writernote-qt/writernote-qt/3rdparty"
      PROJECT_PATH: "/home/runner/work/writernote-qt/writernote-qt/"
      CACHE_KEY: cache-key-ci
      ZLIB_VER: "v1.2.11"
      RESET_CACHE: 'false'
      SDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/sdk"
      NDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/ndk"
      JDK_PATH: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/jdk"
      QT_PREFIX: "/home/runner/work/writernote-qt/writernote-qt/3rdparty/qt_build"

    steps:
      - name: "Clone"
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up dep
        run: |
          sudo apt install snapd ninja-build
          sudo snap install cmake --classic
      
      - name: Download openJDK
        run: |
          curl -L https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-b04-linux-x64-14_jan_2020.tar.gz -o openjdk-linux.tar.gz
          tar -xf openjdk-linux.tar.gz
          mv java* $JDK_PATH

      - name: Download and set SDK 
        run: |
          curl -L https://dl.google.com/android/repository/platform-tools_r31.0.3-linux.zip -o sdk.zip
          unzip sdk.zip
          mv platform-tools $SDK_PATH

      - name: Download and set NDK
        run: |
          curl -L https://dl.google.com/android/repository/android-ndk-r22b-linux-x86_64.zip -o ndk.zip
          unzip ndk.zip
          mv android-ndk-r22b $NDK_PATH

      - name: Download qt
        uses: jurplel/install-qt-action@v2
        with:
          host: 'linux'
          version: 5.15.2
          target: 'android'
          modules: 'multimedia'


      #- name: Qt 5.15.2 cache.
      #  id: cache-qt
      #  uses: actions/cache@v2
      #  with:
      #    path: ${{ env.PREFIX_LIB }}/qt-cache
      #    key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}-qtmulmedia-1

      #- name: Use cached Qt 5.15.2.
      #  if: steps.cache-qt.outputs.cache-hit == 'true'
      #  run: |
      #    cd $PREFIX_LIB
      #    mv qt-cache Qt-5.15.2
      #    sudo mkdir -p $QT_PREFIX
      #    sudo mv -f Qt-5.15.2 "$(dirname "$QT_PREFIX")"/

      #- name: Build Qt 5.15.2
      #  if: steps.cache-qt.outputs.cache-hit != 'true' && false
      #  run: |
      #    export JAVA_HOME=$JDK_PATH
      #    export PATH=$JAVA_HOME/bin:$PATH

      #    mkdir build_qt
      #    git clone git://code.qt.io/qt/qt5.git qt_$QT
      #    cd qt_$QT
      #    perl init-repository --module-subset=qtbase,qtimageformats,qtmultimedia
      #    git checkout v5.15.2
      #    git submodule update qtbase
      #    git submodule update qtimageformats
      #    git submodule update qtmultimedia
      #    cd qtbase
      #    #find ../../patches/qtbase_$QT -type f -print0 | sort -z | xargs -0 git apply
      #    cd ..

      #    echo $QT_PREFIX 
      #    echo $NDK_PATH
      #    echo $SDK_PATH
      #  
      #    ./configure -xplatform android-clang \
      #      -prefix "$QT_PREFIX" \
      #      -disable-rpath \
      #      -nomake tests \
      #      -nomake examples \
      #      -android-ndk $NDK_PATH \
      #      -android-sdk $SDK_PATH \
      #      -no-warnings-are-errors \
      #      -static \
      #      -opensource \
      #      -confirm-license \
      #      -android-ndk-host linux-x86_64/

      #    #./configure \
      #    # -prefix "$QT_PREFIX" \
      #    # -static \
      #    # -static-runtime \
      #    # -release \
      #    # -opensource \
      #    # -confirm-license \
      #    # -qt-zlib \
      #    # -qt-pcre \
      #    # -qt-libpng \
      #    # -qt-libjpeg \
      #    # -qt-freetype \
      #    # -opengl desktop \
      #    # -sql-sqlite \
      #    # -make libs \
      #    # -nomake tools \
      #    # -nomake examples \
      #    # -nomake tests \
      #    # -skip qtwebengine
      #    
      #    echo run make
      #    make -j$(nproc)
      #    
      #    echo run sudo make install
      #    sudo make install

      #    echo run make clean
      #    make clean
      #    
      #    cp -r $QT_PREFIX $PREFIX_LIB/qt-cache

      - name: Build libzip
        run: |
          cd 3rdparty
          #ANDROID_NDK=/home/$USER/Android/Sdk/ndk/22.0.7026061/
          #export PATH=${ANDROID_NDK}:$PATH
          #export NDK_PROJECT_PATH=./
          
          chmod +x libzip.sh
          ./libzip.sh OFF $NDK_PATH

          #$NDK_PATH/build/ndk-build APP_STL=c++_shared     \
          #          APP_PLATFORM=android-16    \
          #          APP_ABI="armeabi-v7a"     \
          #          NDK_TOOLCHAIN_VERSION=5   \
          #          NDK_PROJECT_PATH=./       \
          #          $@
          
      
      - name: install lib for build poppler
        run: |
          sudo apt-get install -y libfreetype-dev libfreetype6-dev

      - name: Build poppler
        run: |
          cd 3rdparty

          git clone https://github.com/freedesktop/poppler.git
          cd poppler
          mkdir build
          mkdir install

          cmake . -DCMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake \
            -DCMAKE_INSTALL_PREFIX=install \
            -DFREETYPE_LIBRARY=/usr/lib/x86_64-linux-gnu/libfreetype.so \ 
            -DFREETYPE_INCLUDE_DIRS=/usr/include/freetype2 \
          	-DANDROID_TOOLCHAIN=clang #\
            #-Bbuild

          make install -j$(nproc --all)
          

      - name: Compile
        run: |
          qmake
          make -j$(nproc) apk
