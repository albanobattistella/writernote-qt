name: macos build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - '!.github/workflows/macos.yml'

  pull_request:
    branches: [ master ]

    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/macos.yml'

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      QT: "5_15_2"
      QT_PREFIX: "/usr/local/desktop-app/Qt-5.15.2"
      PREFIX: "/usr/local/macos"
      PREFIX_LIB: "/Users/runner/work/writernote-qt/writernote-qt/3rdparty"
      PROJECT_PATH: "/Users/runner/work/writernote-qt/writernote-qt/"
      CACHE_KEY: cache-key-ci
      ZLIB_VER: "v1.2.11"
      RESET_CACHE: 'false'
    steps:
      - name: "Clone"
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: First set up
        run: |
          brew install automake libtool libvorbis libvpx \
            ninja opus sdl pkg-config cmake
          brew install libzip qt@5
          brew install poppler-qt5

          sudo mdutil -a -i off

      #- name: Install Qt
      #  uses: jurplel/install-qt-action@v2.13.2
      #  with:
      #    version: 5.15.2 # optional, default is 5.15.2
      #    modules: multimedia # optional
          

      - name: MozJPEG.
        run: |
          cd $LibrariesPath
          git clone -b v4.0.1-rc2 https://github.com/mozilla/mozjpeg.git
          cd mozjpeg
          cmake -B build . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DWITH_JPEG8=ON \
          -DPNG_SUPPORTED=OFF
          cmake --build build -j$(nproc)
          sudo cmake --install build

      - name: Qt 5.15.2 cache.
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ env.PREFIX_LIB }}
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}-${{ hashFiles('qt-cache/**') }}

      - name: Use cached Qt 5.15.2.
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          cd $PREFIX_LIB
          mv qt-cache Qt-5.15.2
          sudo mkdir -p $QT_PREFIX
          sudo mv -f Qt-5.15.2 "$(dirname "$QT_PREFIX")"/

      - name: Build Qt 5.15.2
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          mkdir build_qt
          git clone git://code.qt.io/qt/qt5.git qt_$QT
          cd qt_$QT
          perl init-repository --module-subset=qtbase,qtimageformats,qtmultimedia
          git checkout v5.15.2
          git submodule update qtbase
          git submodule update qtimageformats
          git submodule update qtmultimedia
          cd qtbase
          #find ../../patches/qtbase_$QT -type f -print0 | sort -z | xargs -0 git apply
          cd ..
          ./configure \
           -prefix "$QT_PREFIX" \
           -static \
           -static-runtime \
           -release \
           -opensource \
           -confirm-license \
           -qt-zlib \
           -qt-pcre \
           -qt-libpng \
           -qt-libjpeg \
           -qt-freetype \
           -opengl desktop \
           -sql-sqlite \
           -make libs \
           -nomake tools \
           -nomake examples \
           -nomake tests \
           -skip qtwebengine
          
          # ./configure \
          #-prefix "$QT_PREFIX" \
          #-debug \
          #-force-debug-info \
          #-opensource \
          #-confirm-license \
          #-static \
          #-opengl desktop \
          #-no-openssl \
          #-securetransport \
          #-nomake examples \
          #-nomake tests \
          #-platform macx-clang \
          #-I "$PREFIX/include" \
          #LIBJPEG_LIBS="$PREFIX/lib/libjpeg.a" \
          #ZLIB_LIBS="$PREFIX/lib/libz.a"

          make -j$(nproc)
          sudo make install
          make clean
          
          cp -r $QT_PREFIX $PREFIX_LIB/qt-cache

      - name: "zlib: Configure and Build"
        run: |
          cd $PREFIX_LIB/zlib-ng

          cmake . -B$PREFIX_LIB/zlib-ng/ \
            -DCMAKE_INSTALL_PREFIX=$PREFIX_LIB/zlib-ng/distrib \
            -DBIN_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/bin \
            -DLIB_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/lib \
            -DINC_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/include \
            -DPKGCONFIG_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/lib/pkgconfig \
            -DMAN_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/share/man \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DZLIB_COMPAT=ON \
            -DZLIB_ENABLE_TESTS=OFF

          cmake --build $PREFIX_LIB/zlib-ng/ --config Release --target install

      - name: "libzip: Configure and Build"
        run: |
          echo $(pwd)
          cd $PREFIX_LIB/libzip
          echo $(pwd)
          mkdir build
          cd build
          cmake .. -B$PREFIX_LIB/libzip \
            -DCMAKE_INSTALL_PREFIX=$PREFIX_LIB/libzip/distrib \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_BZIP2=OFF \
            -DENABLE_LZMA=OFF \
            -DENABLE_COMMONCRYPTO=OFF \
            -DENABLE_GNUTLS=OFF \
            -DENABLE_MBEDTLS=OFF \
            -DENABLE_OPENSSL=OFF \
            -DENABLE_WINDOWS_CRYPTO=OFF \
            -DBUILD_DOC=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_REGRESS=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TOOLS=OFF \
            -DZLIB_INCLUDE_DIR=$PREFIX_LIB/zlib-ng/distrib/include \
            -DZLIB_LIBRARY_DEBUG=$PREFIX_LIB/zlib-ng/distrib/lib/zlib.lib \
            -DZLIB_LIBRARY_RELEASE=$PREFIX_LIB/zlib-ng/distrib/lib/zlib.lib

          cmake --build $PREFIX_LIB/libzip/ --config Release --target install

      - name: Build openjpg
        run: |
          export PATH="$HOME/.new_local/bin:$PATH"

          curl -L https://github.com/uclouvain/openjpeg/archive/v2.3.0.tar.gz -o openjpeg.tar.gz
          tar xf openjpeg.tar.gz
          cd openjpeg-* || exit
          mkdir build
          cd build || exit
          pwd
          cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME"/gtk/inst ..
          make -j$(nproc)
          make install

      #- name: Build poppler-qt5
      #  run: |
      #    export PATH="$HOME/.new_local/bin:$PATH"
      #    cd $PREFIX_LIB

      #    curl https://poppler.freedesktop.org/poppler-0.72.0.tar.xz -o poppler.tar.xz
      #    tar xf poppler.tar.xz
      #    echo 1: $(ls)
      #    rm poppler.tar.xz
      #    echo 2: $(ls)
      #    mv poppler-* poppler
      #    echo 3: $(ls)
      #    cd poppler || exit
      #    
      #    mkdir build
      #    
      #    cd build || exit
      #    pwd
      #    cmake -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX_LIB/poppler ..
      #    make -j$(nproc)
      #    make install

      - name: Build
        run: |
        
          echo File: $(ls /usr/local/opt/poppler-qt5/lib)
        
          #qmake writernote.pro \
          #  DEFINES+="CI_MAC"
          
          echo Qt_PREFIX ls: $(ls $QT_PREFIX)
          cd $QT_PREFIX
          echo $(ls)
          cd qtmultimedia*
          echo $(ls)

          exit

          $QT_PREFIX/bin/qmake writernote.pro \
            DEFINES+="CI_MAC" \
            LIB+="$PREFIX_LIB/libzip/lib/libzip.a" \
            INCLUDEPATH+="$PREFIX_LIB/libzip/lib"

          make -j$(nproc)
          echo $(ls)
      
      - name: Lib
        run: |
          python3 macos-build/get_dep.py $(pwd)/build/writernote.app        
          
