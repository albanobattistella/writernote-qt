name: macos build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - '!.github/workflows/macos.yml'

  pull_request:
    branches: [ master ]

    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/macos.yml'

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      QT: "5_15_2"
      QT_PREFIX: "/usr/local/desktop-app/Qt-5.15.2"
      PREFIX: "/usr/local/macos"
      PREFIX_LIB: "3rdparty"
    steps:
      - uses: actions/checkout@v2

      - name: First set up
        run: |
          brew install automake libtool libvorbis libvpx \
            ninja opus sdl pkg-config

          sudo mdutil -a -i off

      - name: Create tmp folder library
        run: |
          echo Create tmp library folder

      #- name: Install Qt
      #  uses: jurplel/install-qt-action@v2.13.2
      #  with:
      #    version: 5.15.2
      #    modules: multimedia

      - name: Qt 5.15.2 cache.
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ env.PREFIX_LIB }}/qt-cache
          key: ${{ runner.OS }}-qt-${{ env.CACHE_KEY }}-${{ hashFiles('**/qtbase_5_15_2/*') }}

      - name: Use cached Qt 5.15.2.
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          cd $PREFIX_LIB
          mv qt-cache Qt-5.15.2
          sudo mkdir -p $QT_PREFIX
          sudo mv -f Qt-5.15.2 "$(dirname "$QT_PREFIX")"/

      - name: Build Qt 5.15.2
        run: |
          echo prefisso: $(QT_PREFIX)
          echo lib path: "${PREFIX_LIB}"
          mkdir build_qt
          git clone git://code.qt.io/qt/qt5.git qt_$QT
          cd qt_$QT
          perl init-repository --module-subset=qtbase,qtimageformats
          git checkout v5.15.2
          git submodule update qtbase
          git submodule update qtimageformats
          cd qtbase
          find ../../patches/qtbase_$QT -type f -print0 | sort -z | xargs -0 git apply
          cd ..
          ./configure \
          -prefix "$QT_PREFIX" \
          -debug \
          -force-debug-info \
          -opensource \
          -confirm-license \
          -static \
          -opengl desktop \
          -no-openssl \
          -securetransport \
          -nomake examples \
          -nomake tests \
          -platform macx-clang \
          -I "$PREFIX/include" \
          LIBJPEG_LIBS="$PREFIX/lib/libjpeg.a" \
          ZLIB_LIBS="$PREFIX/lib/libz.a"
          make -j$(nproc)
          sudo make install
          make clean
          echo LibrariesPath: $(PREFIX_LIB)
          echo QT_PREFIX: $(QT_PREFIX)
          cp -r $QT_PREFIX $PREFIX_LIB/qt-cache

      - name: zlib Information
        shell: bash
        id: zlib-info
        run: |
          mkdir -p "${PWD}/3rdparty/zlib-ng"
          cd "${PWD}/3rdparty/zlib-ng/"
          version=$(git describe --tags --long --abbrev=8 HEAD)
          echo "zlib: ${version}"
          echo "::set-output name=version::${version}"

      - name: zlib Cache
        uses: actions/cache@v2
        id: zlib-cache
        with:
          path: |
            build/zlib/distrib
          key: zlib-${{steps.zlib-info.outputs.version}}-${{ matrix.id }}-${{ secrets.CACHE_VERSION }}
      - name: "zlib: Configure"
        if: "steps.zlib-cache.outputs.cache-hit != 'true'"
        shell: bash
        run: |
          cmake -H3rdparty/zlib-ng -Bbuild/zlib/build \
            -DCMAKE_INSTALL_PREFIX=build/zlib/distrib \
            -DBIN_INSTALL_DIR=build/zlib/distrib/bin \
            -DLIB_INSTALL_DIR=build/zlib/distrib/lib \
            -DINC_INSTALL_DIR=build/zlib/distrib/include \
            -DPKGCONFIG_INSTALL_DIR=build/zlib/distrib/lib/pkgconfig \
            -DMAN_INSTALL_DIR=build/zlib/distrib/share/man \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DZLIB_COMPAT=ON \
            -DZLIB_ENABLE_TESTS=OFF
      - name: zlib Build
        if: "steps.zlib-cache.outputs.cache-hit != 'true'"
        shell: bash
        run: |
          cmake --build build/zlib/build --config Release --target INSTALL
      - name: "libzip: Information"
        shell: bash
        id: libzip-info
        run: |
          cd "${PWD}/3rdparty/libzip/"
          version=$(git describe --tags --long --abbrev=8 HEAD)
          echo "libzip: ${version}"
          echo "::set-output name=version::${version}"
      - name: libzip Cache
        uses: actions/cache@v2
        id: libzip-cache
        with:
          path: |
            build/libzip/distrib
          key: libzip-${{steps.zlib-info.outputs.version}}-${{steps.libzip-info.outputs.version}}-${{ matrix.id }}-${{ secrets.CACHE_VERSION }}
      - name: "libzip: Configure"
        if: "(steps.zlib-cache.outputs.cache-hit != 'true') || (steps.libzip-cache.outputs.cache-hit != 'true')"
        shell: bash
        run: |
          cmake -H3rdparty/libzip -Bbuild/libzip/build \
            -DCMAKE_INSTALL_PREFIX=build/libzip/distrib \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_BZIP2=OFF \
            -DENABLE_LZMA=OFF \
            -DENABLE_COMMONCRYPTO=OFF \
            -DENABLE_GNUTLS=OFF \
            -DENABLE_MBEDTLS=OFF \
            -DENABLE_OPENSSL=OFF \
            -DENABLE_WINDOWS_CRYPTO=OFF \
            -DBUILD_DOC=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_REGRESS=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TOOLS=OFF \
            -DZLIB_INCLUDE_DIR=build/zlib/distrib/include \
            -DZLIB_LIBRARY_DEBUG=build/zlib/distrib/lib/zlib.lib \
            -DZLIB_LIBRARY_RELEASE=build/zlib/distrib/lib/zlib.lib
      - name: libzip Build
        if: "(steps.zlib-cache.outputs.cache-hit != 'true') || (steps.libzip-cache.outputs.cache-hit != 'true')"
        shell: bash
        run: |
          cmake --build build/libzip/build --config Release --target INSTALL

      - name: Download dep
        run: |
          ./macos-build/dep.sh

      - name: Compile
        run: |
          ./macos-build/compile.sh
          
