name: MacOS

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - 'updater/**'
      - 'windows/**'
      - '!.github/workflows/macos.yml'

  pull_request:
    branches: [ master ]

    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/macos.yml'

  release:
    types:
      - published

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-10.15

    env:
      QT: "6_3_0"
      QT_PREFIX: "/usr/local/desktop-app/qt_6_0_3"
      PREFIX: "/usr/local/macos"
      PREFIX_LIB: "/Users/runner/work/writernote-qt/writernote-qt/3rdparty"
      PROJECT_PATH: "/Users/runner/work/writernote-qt/writernote-qt/"
      CACHE_KEY: cache-key-ci
      ZLIB_VER: "v1.2.11"
      RESET_CACHE: 'false'
    
    steps:
      - name: Clone.
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up
        run: |
          brew install automake libtool libvorbis libvpx \
            ninja opus sdl pkg-config cmake
          brew install libzip
          brew install nss

          sudo mdutil -a -i off

      - name: MozJPEG.
        run: |
          cd $LibrariesPath
          git clone -b v4.0.1-rc2 https://github.com/mozilla/mozjpeg.git
          cd mozjpeg
          cmake -B build . \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DWITH_JPEG8=ON \
          -DPNG_SUPPORTED=OFF
          cmake --build build -j$(nproc)
          sudo cmake --install build

      - name: Qt 6.3.0 cache.
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ env.PREFIX_LIB }}/qt-cache
          key: ${{ runner.OS }}-qt6-${{ env.CACHE_KEY }}-qtmulmedia-0

      - name: Use cached Qt 6.3.0
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: |
          cd $PREFIX_LIB
          mv qt-cache Qt-6.3.0
          sudo mkdir -p $QT_PREFIX
          sudo mv -f Qt-6.3.0 $QT_PREFIX

      - name: Build Qt 6.3.0
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          git clone -b v6.3.0 https://code.qt.io/qt/qt5.git qt_${QT}
          cd qt_${QT}
          perl init-repository --module-subset=qtbase,qtimageformats,qtsvg,qt5compat,qtmultimedia,qtshadertools
          
          ./configure \
            -prefix "$QT_PREFIX" \
            -force-debug-info \
            -opensource \
            -confirm-license \
            -static \
            -opengl desktop \
            -no-openssl \
            -securetransport \
            -no-feature-futimens \
            -nomake examples \
            -nomake tests \
            -platform macx-clang -- -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          
          ninja
          sudo ninja install

          cp -r $QT_PREFIX $PREFIX_LIB/qt-cache

      - name: "zlib: Configure and Build"
        run: |
          cd $PREFIX_LIB/zlib-ng

          cmake . -B$PREFIX_LIB/zlib-ng/ \
            -DCMAKE_INSTALL_PREFIX=$PREFIX_LIB/zlib-ng/distrib \
            -DBIN_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/bin \
            -DLIB_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/lib \
            -DINC_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/include \
            -DPKGCONFIG_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/lib/pkgconfig \
            -DMAN_INSTALL_DIR=$PREFIX_LIB/zlib-ng/distrib/share/man \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DZLIB_COMPAT=ON \
            -DZLIB_ENABLE_TESTS=OFF

          cmake --build $PREFIX_LIB/zlib-ng/ --config Release --target install

      - name: "libzip: Configure and Build"
        run: |
          echo $(pwd)
          cd $PREFIX_LIB/libzip
          echo $(pwd)
          mkdir build
          cd build
          cmake .. -B$PREFIX_LIB/libzip \
            -DCMAKE_INSTALL_PREFIX=$PREFIX_LIB/libzip/distrib \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_BZIP2=OFF \
            -DENABLE_LZMA=OFF \
            -DENABLE_COMMONCRYPTO=OFF \
            -DENABLE_GNUTLS=OFF \
            -DENABLE_MBEDTLS=OFF \
            -DENABLE_OPENSSL=OFF \
            -DENABLE_WINDOWS_CRYPTO=OFF \
            -DBUILD_DOC=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_REGRESS=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            -DBUILD_TOOLS=OFF \
            -DZLIB_INCLUDE_DIR=$PREFIX_LIB/zlib-ng/distrib/include \
            -DZLIB_LIBRARY_DEBUG=$PREFIX_LIB/zlib-ng/distrib/lib/zlib.lib \
            -DZLIB_LIBRARY_RELEASE=$PREFIX_LIB/zlib-ng/distrib/lib/zlib.lib

          cmake --build $PREFIX_LIB/libzip/ --config Release --target install

      - name: Build openjpg
        run: |
          export PATH="$HOME/.new_local/bin:$PATH"

          curl -L https://github.com/uclouvain/openjpeg/archive/v2.3.0.tar.gz -o openjpeg.tar.gz
          tar xf openjpeg.tar.gz
          cd openjpeg-* || exit
          mkdir build
          cd build || exit
          pwd
          cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME"/gtk/inst ..
          make -j$(nproc)
          make install

      - name: Build poppler-qt6
        run: |
          export PATH="$HOME/.new_local/bin:$PATH"
          cd $PREFIX_LIB

          cd poppler || exit
          
          mkdir build
          
          cd build || exit
          pwd
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$PREFIX_LIB/poppler \
            -DQt6_DIR=$QT_PREFIX/lib/cmake/Qt6/ \
            -DENABLE_BOOST=OFF
            
          make -j$(nproc)
          sudo make install

      - name: Writernote build
        run: |
          export VERSION=$(git describe --tags --abbrev=0)

          find $QT_PREFIX -name "Qt6Config.cmake"
          find $PREFIX_LIB -name "Qt6Config.cmake"

          echo $(ls $QT_PREFIX)
          echo $(ls $QT_PREFIX/..)
          echo $(ls $QT_PREFIX/../Qt-6.3.0)

          mkdir build
          cd build
          cmake .. \
            -G "Ninja" \
            -DMACOS_BUILD=ON \
            -DQt6_DIR=$QT_PREFIX/lib/cmake/Qt6/


          #$QT_PREFIX/bin/qmake writernote.pro \
          #  DEFINES+="CI_MAC" \
          #  LIBS+="$PREFIX_LIB/libzip/distrib/lib/libzip.a" \
          #  INCLUDEPATH+="$PREFIX_LIB/libzip/distrib/include" \
          #  DEFINES+="VERSION_SNAPCRAFT=$VERSION"

          make -j$(nproc)
          echo $(ls)
      
      - name: Lib static
        if: false
        run: |
          export LIB_PATH=Contents/Resources/lib/
          export POS_BIN=Contents/MacOS/writernote
          mkdir build/writernote.app/$LIB_PATH
          
          cp /usr/local/opt/libzip/lib/libzip.5.dylib build/writernote.app/$LIB_PATH/
          cp /usr/local/opt/poppler-qt5/lib/libpoppler-qt5.1.dylib build/writernote.app/$LIB_PATH/

          install_name_tool -change /usr/local/opt/libzip/lib/libzip.5.dylib @executable_path/../Resources/lib/libzip.5.dylib $PROJECT_PATH/build/writernote.app/$POS_BIN
          install_name_tool -change /usr/local/opt/poppler-qt5/lib/libpoppler-qt5.1.dylib @executable_path/../Resources/lib/libpoppler-qt5.1.dylib $PROJECT_PATH/build/writernote.app/$POS_BIN

      - name: Lib runtime
        run: |
          export LIB_PATH=Contents/Resources/lib/
          export POS_BIN=Contents/MacOS/writernote
          
          sudo python3 macos-build/get_dep.py $(pwd)/build/writernote.app        

          install_name_tool -change /usr/local/opt/poppler-qt5/lib/libpoppler-qt5.1.dylib @executable_path/../Resources/lib/libpoppler-qt5.1.dylib $PROJECT_PATH/build/writernote.app/$POS_BIN

      - name: Package and upload
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
        run: |
          export VERSION=$(git describe --tags --abbrev=0)
          
          export POS=$PWD
          export BUILD=$POS/build

          # make zip to upload
          cd $BUILD
          zip -r "$POS/macos_writernote_setup_$VERSION.zip" writernote.app
          cd ..

          mv $BUILD/writernote.app "$BUILD/macos_writernote_setup_$VERSION.app"
          gh release upload "$VERSION" "$POS/macos_writernote_setup_$VERSION.zip" --clobber
        
